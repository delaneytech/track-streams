import kotlin.reflect.jvm.internal.impl.descriptors.deserialization.AdditionalClassPartsProvider

buildscript {
	ext {
		kotlinVersion = '1.2.41'
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("com.github.jengelman.gradle.plugins:shadow:2.0.4")
	}
}

apply plugin: 'scala'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.spring.dependency-management'

group = 'io.geoant'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false

sourceSets {
    main {
        scala {
            srcDirs = ['src/main/scala','src/main/kotlin']
        }
    }
    test {
        scala {
            srcDirs = ['src/test/scala','src/main/kotlin']
        }
    }
}

shadowJar {
    zip64 true
    mergeServiceFiles('reference.conf')
	mergeServiceFiles('META-INF/services/org.apache.spark.sql.sources.DataSourceRegister')
    append('application.yml')
	append('application.conf')
}

//shadowJar {
//    append('resource.conf') // that's all!
//}

bootJar {
    manifest {
        attributes (
            'Start-Class': 'io.geoant.trackstreams.TrackStreamsApplication'
//			'Main-Class': 'org.springframework.boot.loader.JarLauncher'
        )
    }
}

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}


repositories {
	maven { url 'http://repo.boundlessgeo.com/main'}
	maven { url 'http://maven.geomajas.org/'}
	mavenCentral()
	maven { url 'http://repo.opennms.org/maven2/' }
	maven { url 'http://maven.geotoolkit.org'}
//	maven { url 's3://geowave-maven/release'
//			authentication(AdditionalClassPartsProvider.None)}
//	maven { url 's3://geowave-maven/snapshot'}
	maven { url 'http://geowave-maven.s3-website-us-east-1.amazonaws.com/release'}
	maven { url 'http://geowave-maven.s3-website-us-east-1.amazonaws.com/snapshot'}
	maven { url 'http://download.osgeo.org/webdav/geotools'}
	maven {
		url  "https://dl.bintray.com/tanukkii007/maven"
	}
}

configurations {
	all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
//      all*.exclude module : 'spring-boot-starter-logging'
	all*.exclude group: 'commons-beanutils'
}


ext {
	springCloudVersion = 'Finchley.RELEASE'
}

dependencies {
	compile group: "com.lightbend.akka.management", name: "akka-management-cluster-bootstrap_2.11", version: "0.16.0"
	compile group: "com.lightbend.akka.discovery", name: "akka-discovery-dns_2.11", version: "0.16.0"
	compile ('com.lightbend.akka.discovery:akka-discovery-kubernetes-api_2.11:0.16.0')
	compile ('com.github.TanUkkii007:akka-cluster-custom-downing_2.11:0.0.12')
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-cassandra-reactive')
//	compile('com.github.vanroy:spring-boot-starter-data-jest:3.1.4.RELEASE')
	compile('org.springframework.boot:spring-boot-starter-integration')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile('org.apache.kafka:kafka-streams:1.0.1')
	compile('org.springframework.cloud:spring-cloud-stream')
	compile('org.springframework.cloud:spring-cloud-stream-binder-kafka-streams')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
    compile('org.scala-lang:scala-library:2.11.12')
	compile('com.typesafe.akka:akka-actor_2.11:2.5.16')
	compile('com.typesafe.akka:akka-cluster_2.11:2.5.16')
	compile('com.typesafe.akka:akka-cluster-tools_2.11:2.5.16')
    compile('com.typesafe.akka:akka-remote_2.11:2.5.16')
	compile('com.typesafe.akka:akka-stream_2.11:2.5.16')
    compile('com.typesafe.akka:akka-stream-kafka_2.11:0.22')
//    compile('org.apache.kafka:kafka_2.11:1.1.0')
	compile('org.apache.spark:spark-kubernetes_2.11:2.3.1')
    compile('org.apache.spark:spark-sql_2.11:2.3.1')
	compile('org.apache.spark:spark-sql-kafka-0-10_2.11:2.3.1')
	compile('org.apache.spark:spark-streaming_2.11:2.3.1')
    compile('org.apache.spark:spark-streaming-kafka-0-10_2.11:2.3.1')
	compile('com.databricks:spark-xml_2.11:0.4.1') {
		exclude group: 'org.apache.spark'
	}
	compile('com.databricks:spark-avro_2.11:4.0.0') {
		exclude group: 'org.apache.spark'
	}
	compile('net.simon04.jelementtree:jelementtree:20100506')
	compile('org.elasticsearch:elasticsearch:6.3.2')
	compile('org.elasticsearch.client:elasticsearch-rest-client:6.3.2')
	compile('org.elasticsearch.client:elasticsearch-rest-high-level-client:6.3.2')
	compile('mil.nga.giat:geowave-datastore-cassandra:0.9.8')
	compile('mil.nga.giat:geowave-format-4676:0.9.8')
	compile('com.datastax.cassandra:cassandra-driver-core:3.5.0')
    compile('com.datastax.cassandra:cassandra-driver-mapping:3.5.0')
    compile('com.datastax.cassandra:cassandra-driver-extras:3.5.0')
//	compile('com.datastax.spark:spark-cassandra-connector-embedded_2.11:2.3.0')
	compile('com.datastax.spark:spark-cassandra-connector-unshaded_2.11:2.3.0')
    compile('com.datastax.spark:spark-cassandra-connector-java_2.11:1.6.0-M1')
    compile('com.google.guava:guava:16.0.1')
	compile('io.netty:netty-transport-native-epoll:4.0.27.Final')
	compile('de.aktey.akka.visualmailbox:collector_2.11:1.1.0')
//    compile('com.sun.jersey:jersey-servlet:1.19.4')
//	compile('org.apache.hadoop:hadoop-common:3.1.0')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
	testCompile('org.springframework.cloud:spring-cloud-stream-test-support')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
